{"version":3,"sources":["api.ts","components/Todo.tsx","components/TodosList.tsx","App.tsx","index.tsx"],"names":["BASE_URL","getData","url","a","fetch","response","json","Todo","todo","title","completed","user","name","TodosList","props","todos","onSortName","onSortStatus","onSortTitle","type","onClick","className","map","key","id","App","useState","preparedTodos","setPreparedTodos","isLoading","setLoading","loadTodos","Promise","all","users","todosWithUsers","find","person","userId","length","sort","b","localeCompare","Number","ReactDOM","render","document","getElementById"],"mappings":"6PAEMA,G,MAAW,wC,SAIFC,E,8EAAf,WAA0BC,GAA1B,eAAAC,EAAA,sEACyBC,MAAM,GAAD,OAAIJ,GAAJ,OAAeE,IAD7C,cACQG,EADR,yBAGSA,EAASC,QAHlB,4C,sBAMO,ICLMC,EAAkB,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAE9BC,EAEED,EAFFC,MACAC,EACEF,EADFE,UAGF,OACE,oCACE,2BAAID,GACJ,2BAAID,EAAKG,KAAKC,MACd,2BAAIF,EAAY,YAAc,kBCLvBG,EAAuB,SAACC,GAAW,IAE5CC,EAIED,EAJFC,MACAC,EAGEF,EAHFE,WACAC,EAEEH,EAFFG,aACAC,EACEJ,EADFI,YAGF,OACE,oCACE,4BAAQC,KAAK,SAASC,QAASF,GAA/B,iBACA,4BAAQC,KAAK,SAASC,QAASJ,GAA/B,gBACA,4BAAQG,KAAK,SAASC,QAASH,GAA/B,kBACA,wBAAII,UAAU,SACXN,EAAMO,KAAI,SAAAd,GAAI,OACb,wBAAIe,IAAKf,EAAKgB,GAAIH,UAAU,QAC1B,kBAAC,EAAD,CAAMb,KAAMA,WC2CTiB,EAjEC,WAAO,IAAD,EACsBC,mBAA0B,IADhD,mBACbC,EADa,KACEC,EADF,OAEYF,oBAAS,GAFrB,mBAEbG,EAFa,KAEFC,EAFE,KAIdC,EAAS,uCAAG,oCAAA5B,EAAA,6DAChB2B,GAAW,GADK,SAGaE,QAAQC,IAAI,CHIpChC,EAbS,UASTA,EAVS,YGOE,mCAGTc,EAHS,KAGFmB,EAHE,KAKVC,EAAiBpB,EAAMO,KAAI,SAACd,GAChC,IAAMG,EAAOuB,EAAME,MAAK,SAACC,GAAD,OAAkBA,EAAOb,KAAOhB,EAAK8B,UAE7D,OAAO,eACF9B,EADL,CAEEG,YAIJiB,EAAiBO,GAdD,2CAAH,qDAgCf,OAA6B,IAAzBR,EAAcY,OAEd,oCACE,4BACEpB,KAAK,SACLC,QAASW,GAFX,cAMCF,GACC,0CAON,oCACE,qDACA,kBAAC,EAAD,CACEd,MAAOY,EACPT,YApCc,WAClBU,EAAiB,YAAID,GAClBa,MAAK,SAACrC,EAAGsC,GAAJ,OAAUtC,EAAEM,MAAMiC,cAAcD,EAAEhC,YAmCtCO,WAhCa,WACjBY,EAAiB,YAAID,GAClBa,MAAK,SAACrC,EAAGsC,GAAJ,OAAUtC,EAAEQ,KAAKC,KAAK8B,cAAcD,EAAE9B,KAAKC,WA+B/CK,aA5Be,WACnBW,EAAiB,YAAID,GAClBa,MAAK,SAACrC,EAAGsC,GAAJ,OAAUE,OAAOF,EAAE/B,WAAaiC,OAAOxC,EAAEO,oBCnCrDkC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.71bbeb08.chunk.js","sourcesContent":["import { Todo, User } from './interfaces';\n\nconst BASE_URL = 'https://jsonplaceholder.typicode.com';\nconst USERS_URL = '/users';\nconst TODOS_URL = '/todos';\n\nasync function getData<T>(url: string): Promise<T> {\n  const response = await fetch(`${BASE_URL}${url}`);\n\n  return response.json();\n}\n\nexport const getUsers = () => {\n  return getData<User[]>(USERS_URL);\n};\n\nexport const getTodos = () => {\n  return getData<Todo[]>(TODOS_URL);\n};\n","import React, { FC } from 'react';\nimport { PreparedTodos } from '../interfaces';\n\ninterface Props {\n  todo: PreparedTodos;\n}\n\nexport const Todo: FC<Props> = ({ todo }) => {\n  const {\n    title,\n    completed,\n  } = todo;\n\n  return (\n    <>\n      <p>{title}</p>\n      <p>{todo.user.name}</p>\n      <p>{completed ? 'Completed' : 'Not complete'}</p>\n    </>\n  );\n};\n","import React, { FC } from 'react';\nimport { PreparedTodos } from '../interfaces';\nimport { Todo } from './Todo';\n\n\ninterface Props {\n  todos: PreparedTodos[];\n  onSortTitle: () => void;\n  onSortName: () => void;\n  onSortStatus: () => void;\n}\n\nexport const TodosList: FC<Props> = (props) => {\n  const {\n    todos,\n    onSortName,\n    onSortStatus,\n    onSortTitle,\n  } = props;\n\n  return (\n    <>\n      <button type=\"button\" onClick={onSortTitle}>Sort by title</button>\n      <button type=\"button\" onClick={onSortName}>Sort by name</button>\n      <button type=\"button\" onClick={onSortStatus}>Sort by status</button>\n      <ul className=\"todos\">\n        {todos.map(todo => (\n          <li key={todo.id} className=\"todo\">\n            <Todo todo={todo} />\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n","import React, { FC, useState } from 'react';\nimport './App.css';\nimport { Todo, User, PreparedTodos } from './interfaces';\nimport { getTodos, getUsers } from './api';\nimport { TodosList } from './components/TodosList';\n\nconst App: FC = () => {\n  const [preparedTodos, setPreparedTodos] = useState<PreparedTodos[]>([]);\n  const [isLoading, setLoading] = useState(false);\n\n  const loadTodos = async () => {\n    setLoading(true);\n\n    const [todos, users] = await Promise.all([getTodos(), getUsers()]);\n\n    const todosWithUsers = todos.map((todo: Todo) => {\n      const user = users.find((person: User) => person.id === todo.userId) as User;\n\n      return {\n        ...todo,\n        user,\n      };\n    });\n\n    setPreparedTodos(todosWithUsers);\n  };\n\n  const sortByTitle = () => {\n    setPreparedTodos([...preparedTodos]\n      .sort((a, b) => a.title.localeCompare(b.title)));\n  };\n\n  const sortByName = () => {\n    setPreparedTodos([...preparedTodos]\n      .sort((a, b) => a.user.name.localeCompare(b.user.name)));\n  };\n\n  const sortByStatus = () => {\n    setPreparedTodos([...preparedTodos]\n      .sort((a, b) => Number(b.completed) - Number(a.completed)));\n  };\n\n  if (preparedTodos.length === 0) {\n    return (\n      <>\n        <button\n          type=\"button\"\n          onClick={loadTodos}\n        >\n          Load todos\n        </button>\n        {isLoading && (\n          <p>Loading...</p>\n        )}\n      </>\n    );\n  }\n\n  return (\n    <>\n      <h1>Dynamic list of TODOs</h1>\n      <TodosList\n        todos={preparedTodos}\n        onSortTitle={sortByTitle}\n        onSortName={sortByName}\n        onSortStatus={sortByStatus}\n      />\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}